{
  "language": "Solidity",
  "sources": {
    "contracts/hardhat-dependency-compiler/@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol';\n"
    },
    "@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12 <=0.7.6;\n\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./utils/MappedSinglyLinkedList.sol\";\n\n///@notice A registry to hold Contract addresses.  Underlying data structure is a singly linked list. \ncontract AddressRegistry is Ownable {\n\n    using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\n\n    event AddressAdded(address indexed _address);\n    event AddressRemoved(address indexed _address);\n\n    MappedSinglyLinkedList.Mapping internal addressList;\n\n    /// @notice Storage field for what type of contract this Registry is storing \n    string public addressType;    \n    \n    /// @notice Contract constructor sets addressType, intializes list and transfers ownership\n    /// @param _addressType The type of contracts stored in this registry \n    /// @param _owner The address to set as owner of the contract\n    constructor(string memory _addressType, address _owner) Ownable() {\n        addressType = _addressType;\n        addressList.initialize();\n        transferOwnership(_owner);\n    }\n\n    /// @notice Returns an array of all contract addresses in the linked list\n    /// @return Array of contract addresses\n    function getAddresses() view external returns(address[] memory) {\n        return addressList.addressArray();\n    } \n\n    /// @notice Adds addresses to the linked list. Will revert if the address is already in the list.  Can only be called by the Registry owner.\n    /// @param _addresses Array of contract addresses to be added\n    function addAddresses(address[] calldata _addresses) public onlyOwner {\n        for(uint256 _address = 0; _address < _addresses.length; _address++ ){\n            addressList.addAddress(_addresses[_address]);\n            emit AddressAdded(_addresses[_address]);\n        }\n    }\n\n    /// @notice Removes an address from the linked list. Can only be called by the Registry owner.\n    /// @param _previousContract The address positionally located before the address that will be deleted. This may be the SENTINEL address if the list contains one contract address\n    /// @param _address The address to remove from the linked list. \n    function removeAddress(address _previousContract, address _address) public onlyOwner {\n        addressList.removeAddress(_previousContract, _address); \n        emit AddressRemoved(_address);\n    } \n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@pooltogether/pooltogether-generic-registry/contracts/utils/MappedSinglyLinkedList.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.7.6;\n\n/// @notice An efficient implementation of a singly linked list of addresses\n/// @dev A mapping(address => address) tracks the 'next' pointer.  A special address called the SENTINEL is used to denote the beginning and end of the list.\nlibrary MappedSinglyLinkedList {\n\n  /// @notice The special value address used to denote the end of the list\n  address public constant SENTINEL = address(0x1);\n\n  /// @notice The data structure to use for the list.\n  struct Mapping {\n    uint256 count;\n\n    mapping(address => address) addressMap;\n  }\n\n  /// @notice Initializes the list.\n  /// @dev It is important that this is called so that the SENTINEL is correctly setup.\n  function initialize(Mapping storage self) internal {\n    require(self.count == 0, \"Already init\");\n    self.addressMap[SENTINEL] = SENTINEL;\n  }\n\n  function start(Mapping storage self) internal view returns (address) {\n    return self.addressMap[SENTINEL];\n  }\n\n  function next(Mapping storage self, address current) internal view returns (address) {\n    return self.addressMap[current];\n  }\n\n  function end(Mapping storage) internal pure returns (address) {\n    return SENTINEL;\n  }\n\n  function addAddresses(Mapping storage self, address[] memory addresses) internal {\n    for (uint256 i = 0; i < addresses.length; i++) {\n      addAddress(self, addresses[i]);\n    }\n  }\n\n  /// @notice Adds an address to the front of the list.\n  /// @param self The Mapping struct that this function is attached to\n  /// @param newAddress The address to shift to the front of the list\n  function addAddress(Mapping storage self, address newAddress) internal {\n    require(newAddress != SENTINEL && newAddress != address(0), \"Invalid address\");\n    require(self.addressMap[newAddress] == address(0), \"Already added\");\n    self.addressMap[newAddress] = self.addressMap[SENTINEL];\n    self.addressMap[SENTINEL] = newAddress;\n    self.count = self.count + 1;\n  }\n\n  /// @notice Removes an address from the list\n  /// @param self The Mapping struct that this function is attached to\n  /// @param prevAddress The address that precedes the address to be removed.  This may be the SENTINEL if at the start.\n  /// @param addr The address to remove from the list.\n  function removeAddress(Mapping storage self, address prevAddress, address addr) internal {\n    require(addr != SENTINEL && addr != address(0), \"Invalid address\");\n    require(self.addressMap[prevAddress] == addr, \"Invalid prevAddress\");\n    self.addressMap[prevAddress] = self.addressMap[addr];\n    delete self.addressMap[addr];\n    self.count = self.count - 1;\n  }\n\n  /// @notice Determines whether the list contains the given address\n  /// @param self The Mapping struct that this function is attached to\n  /// @param addr The address to check\n  /// @return True if the address is contained, false otherwise.\n  function contains(Mapping storage self, address addr) internal view returns (bool) {\n    return addr != SENTINEL && addr != address(0) && self.addressMap[addr] != address(0);\n  }\n\n  /// @notice Returns an address array of all the addresses in this list\n  /// @dev Contains a for loop, so complexity is O(n) wrt the list size\n  /// @param self The Mapping struct that this function is attached to\n  /// @return An array of all the addresses\n  function addressArray(Mapping storage self) internal view returns (address[] memory) {\n    address[] memory array = new address[](self.count);\n    uint256 count;\n    address currentAddress = self.addressMap[SENTINEL];\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\n      array[count] = currentAddress;\n      currentAddress = self.addressMap[currentAddress];\n      count++;\n    }\n    return array;\n  }\n\n  /// @notice Removes every address from the list\n  /// @param self The Mapping struct that this function is attached to\n  function clearAll(Mapping storage self) internal {\n    address currentAddress = self.addressMap[SENTINEL];\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\n      address nextAddress = self.addressMap[currentAddress];\n      delete self.addressMap[currentAddress];\n      currentAddress = nextAddress;\n    }\n    self.addressMap[SENTINEL] = SENTINEL;\n    self.count = 0;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}