{
  "address": "0xb9D70C3d7E4453Cc679D8A91145a28782268f229",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_addressType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "AddressAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "AddressRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_previousContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc4d3ed3eb0ff6a8733c04238d12795743acdc937c551dbd5348680a89cd27ee6",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0xb9D70C3d7E4453Cc679D8A91145a28782268f229",
    "transactionIndex": 22,
    "gasUsed": "708835",
    "logsBloom": "0x
    "blockHash": "0xf2d7383cb507ce3421c4bbb4465dd70cd9b1b7a6431491c92ef0de1050634cce",
    "transactionHash": "0xc4d3ed3eb0ff6a8733c04238d12795743acdc937c551dbd5348680a89cd27ee6",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 8492922,
        "transactionHash": "0xc4d3ed3eb0ff6a8733c04238d12795743acdc937c551dbd5348680a89cd27ee6",
        "address": "0xb9D70C3d7E4453Cc679D8A91145a28782268f229",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0xf2d7383cb507ce3421c4bbb4465dd70cd9b1b7a6431491c92ef0de1050634cce"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 8492922,
        "transactionHash": "0xc4d3ed3eb0ff6a8733c04238d12795743acdc937c551dbd5348680a89cd27ee6",
        "address": "0xb9D70C3d7E4453Cc679D8A91145a28782268f229",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xf2d7383cb507ce3421c4bbb4465dd70cd9b1b7a6431491c92ef0de1050634cce"
      }
    ],
    "blockNumber": 8492922,
    "cumulativeGasUsed": "2412797",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Prize Pools",
    "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4"
  ],
  "solcInputHash": "0d6e349291395349a86f16c86e763cd0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_addressType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_previousContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAddresses(address[])\":{\"params\":{\"_addresses\":\"Array of contract addresses to be added\"}},\"constructor\":{\"params\":{\"_addressType\":\"The type of contracts stored in this registry \",\"_owner\":\"The address to set as owner of the contract\"}},\"getAddresses()\":{\"returns\":{\"_0\":\"Array of contract addresses\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAddress(address,address)\":{\"params\":{\"_address\":\"The address to remove from the linked list. \",\"_previousContract\":\"The address positionally located before the address that will be deleted. This may be the SENTINEL address if the list contains one contract address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAddresses(address[])\":{\"notice\":\"Adds addresses to the linked list. Will revert if the address is already in the list.  Can only be called by the Registry owner.\"},\"addressType()\":{\"notice\":\"Storage field for what type of contract this Registry is storing \"},\"constructor\":{\"notice\":\"Contract constructor sets addressType, intializes list and transfers ownership\"},\"getAddresses()\":{\"notice\":\"Returns an array of all contract addresses in the linked list\"},\"removeAddress(address,address)\":{\"notice\":\"Removes an address from the linked list. Can only be called by the Registry owner.\"}},\"notice\":\"A registry to hold Contract addresses.  Underlying data structure is a singly linked list. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol\":\"AddressRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <=0.7.6;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./utils/MappedSinglyLinkedList.sol\\\";\\n\\n///@notice A registry to hold Contract addresses.  Underlying data structure is a singly linked list. \\ncontract AddressRegistry is Ownable {\\n\\n    using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n\\n    event AddressAdded(address indexed _address);\\n    event AddressRemoved(address indexed _address);\\n\\n    MappedSinglyLinkedList.Mapping internal addressList;\\n\\n    /// @notice Storage field for what type of contract this Registry is storing \\n    string public addressType;    \\n    \\n    /// @notice Contract constructor sets addressType, intializes list and transfers ownership\\n    /// @param _addressType The type of contracts stored in this registry \\n    /// @param _owner The address to set as owner of the contract\\n    constructor(string memory _addressType, address _owner) Ownable() {\\n        addressType = _addressType;\\n        addressList.initialize();\\n        transferOwnership(_owner);\\n    }\\n\\n    /// @notice Returns an array of all contract addresses in the linked list\\n    /// @return Array of contract addresses\\n    function getAddresses() view external returns(address[] memory) {\\n        return addressList.addressArray();\\n    } \\n\\n    /// @notice Adds addresses to the linked list. Will revert if the address is already in the list.  Can only be called by the Registry owner.\\n    /// @param _addresses Array of contract addresses to be added\\n    function addAddresses(address[] calldata _addresses) public onlyOwner {\\n        for(uint256 _address = 0; _address < _addresses.length; _address++ ){\\n            addressList.addAddress(_addresses[_address]);\\n            emit AddressAdded(_addresses[_address]);\\n        }\\n    }\\n\\n    /// @notice Removes an address from the linked list. Can only be called by the Registry owner.\\n    /// @param _previousContract The address positionally located before the address that will be deleted. This may be the SENTINEL address if the list contains one contract address\\n    /// @param _address The address to remove from the linked list. \\n    function removeAddress(address _previousContract, address _address) public onlyOwner {\\n        addressList.removeAddress(_previousContract, _address); \\n        emit AddressRemoved(_address);\\n    } \\n}\",\"keccak256\":\"0x52c746b3872e6b13ff0b5ad3301eb95e0f975b056d5918390c91ee1a1399febc\",\"license\":\"MIT\"},\"@pooltogether/pooltogether-generic-registry/contracts/utils/MappedSinglyLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.6;\\n\\n/// @notice An efficient implementation of a singly linked list of addresses\\n/// @dev A mapping(address => address) tracks the 'next' pointer.  A special address called the SENTINEL is used to denote the beginning and end of the list.\\nlibrary MappedSinglyLinkedList {\\n\\n  /// @notice The special value address used to denote the end of the list\\n  address public constant SENTINEL = address(0x1);\\n\\n  /// @notice The data structure to use for the list.\\n  struct Mapping {\\n    uint256 count;\\n\\n    mapping(address => address) addressMap;\\n  }\\n\\n  /// @notice Initializes the list.\\n  /// @dev It is important that this is called so that the SENTINEL is correctly setup.\\n  function initialize(Mapping storage self) internal {\\n    require(self.count == 0, \\\"Already init\\\");\\n    self.addressMap[SENTINEL] = SENTINEL;\\n  }\\n\\n  function start(Mapping storage self) internal view returns (address) {\\n    return self.addressMap[SENTINEL];\\n  }\\n\\n  function next(Mapping storage self, address current) internal view returns (address) {\\n    return self.addressMap[current];\\n  }\\n\\n  function end(Mapping storage) internal pure returns (address) {\\n    return SENTINEL;\\n  }\\n\\n  function addAddresses(Mapping storage self, address[] memory addresses) internal {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      addAddress(self, addresses[i]);\\n    }\\n  }\\n\\n  /// @notice Adds an address to the front of the list.\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param newAddress The address to shift to the front of the list\\n  function addAddress(Mapping storage self, address newAddress) internal {\\n    require(newAddress != SENTINEL && newAddress != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[newAddress] == address(0), \\\"Already added\\\");\\n    self.addressMap[newAddress] = self.addressMap[SENTINEL];\\n    self.addressMap[SENTINEL] = newAddress;\\n    self.count = self.count + 1;\\n  }\\n\\n  /// @notice Removes an address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param prevAddress The address that precedes the address to be removed.  This may be the SENTINEL if at the start.\\n  /// @param addr The address to remove from the list.\\n  function removeAddress(Mapping storage self, address prevAddress, address addr) internal {\\n    require(addr != SENTINEL && addr != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[prevAddress] == addr, \\\"Invalid prevAddress\\\");\\n    self.addressMap[prevAddress] = self.addressMap[addr];\\n    delete self.addressMap[addr];\\n    self.count = self.count - 1;\\n  }\\n\\n  /// @notice Determines whether the list contains the given address\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param addr The address to check\\n  /// @return True if the address is contained, false otherwise.\\n  function contains(Mapping storage self, address addr) internal view returns (bool) {\\n    return addr != SENTINEL && addr != address(0) && self.addressMap[addr] != address(0);\\n  }\\n\\n  /// @notice Returns an address array of all the addresses in this list\\n  /// @dev Contains a for loop, so complexity is O(n) wrt the list size\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @return An array of all the addresses\\n  function addressArray(Mapping storage self) internal view returns (address[] memory) {\\n    address[] memory array = new address[](self.count);\\n    uint256 count;\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      array[count] = currentAddress;\\n      currentAddress = self.addressMap[currentAddress];\\n      count++;\\n    }\\n    return array;\\n  }\\n\\n  /// @notice Removes every address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  function clearAll(Mapping storage self) internal {\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      address nextAddress = self.addressMap[currentAddress];\\n      delete self.addressMap[currentAddress];\\n      currentAddress = nextAddress;\\n    }\\n    self.addressMap[SENTINEL] = SENTINEL;\\n    self.count = 0;\\n  }\\n}\\n\",\"keccak256\":\"0x14a99407202bafc5988b8ea002afabac73c13f88372083cf381d447ef30edc85\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000e3d38038062000e3d833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b5060405260200151915060009050620000fe62000177565b600080546001600160a01b0319166001600160a01b03831690811782556040519293509160008051602062000e1d833981519152908290a35081516200014c906003906020850190620002fd565b506200016460016200017b60201b620006451760201c565b6200016f81620001e4565b5050620003a9565b3390565b805415620001bf576040805162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481a5b9a5d60a21b604482015290519081900360640190fd5b60016000818152918101602052604090912080546001600160a01b0319169091179055565b620001ee62000177565b6001600160a01b031662000201620002ee565b6001600160a01b0316146200025d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116620002a45760405162461bcd60e51b815260040180806020018281038252602681526020018062000df76026913960400191505060405180910390fd5b600080546040516001600160a01b038085169392169160008051602062000e1d83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262000335576000855562000380565b82601f106200035057805160ff191683800117855562000380565b8280016001018555821562000380579182015b828111156200038057825182559160200191906001019062000363565b506200038e92915062000392565b5090565b5b808211156200038e576000815560010162000393565b610a3e80620003b96000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b14610179578063a39fac121461019d578063b6fac15a146101f5578063f2fde38b146102235761007d565b80633628731c14610082578063506cd107146100f4578063715018a614610171575b600080fd5b6100f26004803603602081101561009857600080fd5b8101906020810181356401000000008111156100b357600080fd5b8201836020820111156100c557600080fd5b803590602001918460208302840111640100000000831117156100e757600080fd5b509092509050610249565b005b6100fc610343565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013657818101518382015260200161011e565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100f26103d1565b61018161047d565b604080516001600160a01b039092168252519081900360200190f35b6101a561048c565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101e15781810151838201526020016101c9565b505050509050019250505060405180910390f35b6100f26004803603604081101561020b57600080fd5b506001600160a01b038135811691602001351661049d565b6100f26004803603602081101561023957600080fd5b50356001600160a01b0316610543565b6102516106ad565b6001600160a01b031661026261047d565b6001600160a01b0316146102ab576040805162461bcd60e51b815260206004820181905260248201526000805160206109e9833981519152604482015290519081900360640190fd5b60005b8181101561033e576102e58383838181106102c557fe5b905060200201356001600160a01b031660016106b190919063ffffffff16565b8282828181106102f157fe5b905060200201356001600160a01b03166001600160a01b03167fa226db3f664042183ee0281230bba26cbf7b5057e50aee7f25a175ff45ce4d7f60405160405180910390a26001016102ae565b505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103c95780601f1061039e576101008083540402835291602001916103c9565b820191906000526020600020905b8154815290600101906020018083116103ac57829003601f168201915b505050505081565b6103d96106ad565b6001600160a01b03166103ea61047d565b6001600160a01b031614610433576040805162461bcd60e51b815260206004820181905260248201526000805160206109e9833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b606061049860016107c5565b905090565b6104a56106ad565b6001600160a01b03166104b661047d565b6001600160a01b0316146104ff576040805162461bcd60e51b815260206004820181905260248201526000805160206109e9833981519152604482015290519081900360640190fd5b61050b600183836108a6565b6040516001600160a01b038216907f24a12366c02e13fe4a9e03d86a8952e85bb74a456c16e4a18b6d8295700b74bb90600090a25050565b61054b6106ad565b6001600160a01b031661055c61047d565b6001600160a01b0316146105a5576040805162461bcd60e51b815260206004820181905260248201526000805160206109e9833981519152604482015290519081900360640190fd5b6001600160a01b0381166105ea5760405162461bcd60e51b81526004018080602001828103825260268152602001806109c36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b805415610688576040805162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481a5b9a5d60a21b604482015290519081900360640190fd5b60016000818152918101602052604090912080546001600160a01b0319169091179055565b3390565b6001600160a01b0381166001148015906106d357506001600160a01b03811615155b610716576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b6001600160a01b0381811660009081526001840160205260409020541615610775576040805162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b604482015290519081900360640190fd5b60016000818152838201602052604080822080546001600160a01b039586168085529284208054969091166001600160a01b03199687161790559183905281549093169092179091558154019055565b60606000826000015467ffffffffffffffff811180156107e457600080fd5b5060405190808252806020026020018201604052801561080e578160200160208202803683370190505b50600160008181529085016020526040812054919250906001600160a01b03165b6001600160a01b0381161580159061085157506001600160a01b038116600114155b1561089d578083838151811061086357fe5b6001600160a01b0392831660209182029290920181019190915291811660009081526001808801909352604090205492909101911661082f565b50909392505050565b6001600160a01b0381166001148015906108c857506001600160a01b03811615155b61090b576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b6001600160a01b038281166000908152600185016020526040902054811690821614610974576040805162461bcd60e51b8152602060048201526013602482015272496e76616c696420707265764164647265737360681b604482015290519081900360640190fd5b6001600160a01b039081166000818152600185016020526040808220805495851683529082208054959094166001600160a01b0319958616179093555280549091169055805460001901905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ca7ed9842a3bf5c6d7b13bcbbcd86395ac0108e7804a0e8f64cc75fa9424001b64736f6c634300070600334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573738be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b14610179578063a39fac121461019d578063b6fac15a146101f5578063f2fde38b146102235761007d565b80633628731c14610082578063506cd107146100f4578063715018a614610171575b600080fd5b6100f26004803603602081101561009857600080fd5b8101906020810181356401000000008111156100b357600080fd5b8201836020820111156100c557600080fd5b803590602001918460208302840111640100000000831117156100e757600080fd5b509092509050610249565b005b6100fc610343565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013657818101518382015260200161011e565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100f26103d1565b61018161047d565b604080516001600160a01b039092168252519081900360200190f35b6101a561048c565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101e15781810151838201526020016101c9565b505050509050019250505060405180910390f35b6100f26004803603604081101561020b57600080fd5b506001600160a01b038135811691602001351661049d565b6100f26004803603602081101561023957600080fd5b50356001600160a01b0316610543565b6102516106ad565b6001600160a01b031661026261047d565b6001600160a01b0316146102ab576040805162461bcd60e51b815260206004820181905260248201526000805160206109e9833981519152604482015290519081900360640190fd5b60005b8181101561033e576102e58383838181106102c557fe5b905060200201356001600160a01b031660016106b190919063ffffffff16565b8282828181106102f157fe5b905060200201356001600160a01b03166001600160a01b03167fa226db3f664042183ee0281230bba26cbf7b5057e50aee7f25a175ff45ce4d7f60405160405180910390a26001016102ae565b505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103c95780601f1061039e576101008083540402835291602001916103c9565b820191906000526020600020905b8154815290600101906020018083116103ac57829003601f168201915b505050505081565b6103d96106ad565b6001600160a01b03166103ea61047d565b6001600160a01b031614610433576040805162461bcd60e51b815260206004820181905260248201526000805160206109e9833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b606061049860016107c5565b905090565b6104a56106ad565b6001600160a01b03166104b661047d565b6001600160a01b0316146104ff576040805162461bcd60e51b815260206004820181905260248201526000805160206109e9833981519152604482015290519081900360640190fd5b61050b600183836108a6565b6040516001600160a01b038216907f24a12366c02e13fe4a9e03d86a8952e85bb74a456c16e4a18b6d8295700b74bb90600090a25050565b61054b6106ad565b6001600160a01b031661055c61047d565b6001600160a01b0316146105a5576040805162461bcd60e51b815260206004820181905260248201526000805160206109e9833981519152604482015290519081900360640190fd5b6001600160a01b0381166105ea5760405162461bcd60e51b81526004018080602001828103825260268152602001806109c36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b805415610688576040805162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481a5b9a5d60a21b604482015290519081900360640190fd5b60016000818152918101602052604090912080546001600160a01b0319169091179055565b3390565b6001600160a01b0381166001148015906106d357506001600160a01b03811615155b610716576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b6001600160a01b0381811660009081526001840160205260409020541615610775576040805162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b604482015290519081900360640190fd5b60016000818152838201602052604080822080546001600160a01b039586168085529284208054969091166001600160a01b03199687161790559183905281549093169092179091558154019055565b60606000826000015467ffffffffffffffff811180156107e457600080fd5b5060405190808252806020026020018201604052801561080e578160200160208202803683370190505b50600160008181529085016020526040812054919250906001600160a01b03165b6001600160a01b0381161580159061085157506001600160a01b038116600114155b1561089d578083838151811061086357fe5b6001600160a01b0392831660209182029290920181019190915291811660009081526001808801909352604090205492909101911661082f565b50909392505050565b6001600160a01b0381166001148015906108c857506001600160a01b03811615155b61090b576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b6001600160a01b038281166000908152600185016020526040902054811690821614610974576040805162461bcd60e51b8152602060048201526013602482015272496e76616c696420707265764164647265737360681b604482015290519081900360640190fd5b6001600160a01b039081166000818152600185016020526040808220805495851683529082208054959094166001600160a01b0319958616179093555280549091169055805460001901905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ca7ed9842a3bf5c6d7b13bcbbcd86395ac0108e7804a0e8f64cc75fa9424001b64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAddresses(address[])": {
        "params": {
          "_addresses": "Array of contract addresses to be added"
        }
      },
      "constructor": {
        "params": {
          "_addressType": "The type of contracts stored in this registry ",
          "_owner": "The address to set as owner of the contract"
        }
      },
      "getAddresses()": {
        "returns": {
          "_0": "Array of contract addresses"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAddress(address,address)": {
        "params": {
          "_address": "The address to remove from the linked list. ",
          "_previousContract": "The address positionally located before the address that will be deleted. This may be the SENTINEL address if the list contains one contract address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAddresses(address[])": {
        "notice": "Adds addresses to the linked list. Will revert if the address is already in the list.  Can only be called by the Registry owner."
      },
      "addressType()": {
        "notice": "Storage field for what type of contract this Registry is storing "
      },
      "constructor": {
        "notice": "Contract constructor sets addressType, intializes list and transfers ownership"
      },
      "getAddresses()": {
        "notice": "Returns an array of all contract addresses in the linked list"
      },
      "removeAddress(address,address)": {
        "notice": "Removes an address from the linked list. Can only be called by the Registry owner."
      }
    },
    "notice": "A registry to hold Contract addresses.  Underlying data structure is a singly linked list. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol:AddressRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 152,
        "contract": "@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol:AddressRegistry",
        "label": "addressList",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Mapping)268_storage"
      },
      {
        "astId": 155,
        "contract": "@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol:AddressRegistry",
        "label": "addressType",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Mapping)268_storage": {
        "encoding": "inplace",
        "label": "struct MappedSinglyLinkedList.Mapping",
        "members": [
          {
            "astId": 263,
            "contract": "@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol:AddressRegistry",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 267,
            "contract": "@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol:AddressRegistry",
            "label": "addressMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_address)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}